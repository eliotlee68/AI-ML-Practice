def add_bias_column(X):
    '''
    Create a bias column and combined it with X.
    Parameters
    ----------
    X : (m, n) numpy matrix representing feature matrix
    
    Returns
    -------
        A (m, n + 1) numpy matrix with the first column consists of all 1
    '''
  
    # TODO: add your solution here and remove `raise NotImplementedError`
    return np.hstack((np.ones((X.shape[0], 1)), X))

def get_bias_and_weight(X, y, include_bias = True):
    '''
    Calculate bias and weights that give the best fitting line.
    Parameters
    ----------
    X (np.ndarray) : (m, n) numpy matrix representing feature matrix
    y (np.ndarray) : (m, 1) numpy matrix representing target values
    include_bias (boolean) : Specify whether the model should include a bias term
    
    Returns
    -------
        bias (float):
            If include_bias = True, return the bias constant. Else,
            return 0
        weights (np.ndarray):
            A (n, 1) numpy matrix representing the weight constant(s).
    '''
  
    # TODO: add your solution here and remove `raise NotImplementedError`
    Xnew = None
    if (include_bias):
        Xnew = add_bias_column(X)
    else:
        Xnew = X
    transposed = np.transpose(Xnew)
    result = np.linalg.inv(np.matmul(transposed, Xnew))
    result = np.matmul(result, transposed)
    result = np.matmul(result, y)
    if (include_bias):
        return (result[0][0], result[1:])
    else:
        return (0.0, result)

def get_prediction_linear_regression(X, y, include_bias = True):
    '''
    Calculate the best fitting line.
    Parameters
    ----------
    X (np.ndarray) : (m, n) numpy matrix representing feature matrix
    y (np.ndarray) : (m, 1) numpy matrix representing target values
    include_bias (boolean) : Specify whether to use bias term
    Returns
    -------
        A (m, 1) numpy matrix representing prediction values.
    '''
  
    # TODO: add your solution here and remove `raise NotImplementedError`
    bias_and_weights = get_bias_and_weight(X, y, include_bias)
    weights = bias_and_weights[1]
    bias = bias_and_weights[0]
    pred_y = np.matmul(X, weights) + bias
    return pred_y
    
